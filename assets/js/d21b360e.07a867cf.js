"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[188],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,y=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(y,i(i({ref:t},p),{},{components:n})):a.createElement(y,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2315:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var a=n(3117),r=n(102),o=(n(7294),n(3905)),i=["components"],l={sidebar_position:1,sidebar_label:"Installation"},s="Installation",c={unversionedId:"basics/installation",id:"basics/installation",isDocsHomePage:!1,title:"Installation",description:"Install SyncedStore and required dependencies:",source:"@site/docs/basics/installation.md",sourceDirName:"basics",slug:"/basics/installation",permalink:"/docs/basics/installation",editUrl:"https://github.com/yousefed/SyncedStore/edit/master/docs/docs/basics/installation.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Installation"},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/"},next:{title:"Example",permalink:"/docs/basics/example"}},p=[{value:"Optional dependencies",id:"optional-dependencies",children:[],level:2},{value:"Creating a store",id:"creating-a-store",children:[],level:2},{value:"<code>syncedStore</code> method",id:"syncedstore-method",children:[{value:"Shape",id:"shape",children:[{value:"Arrays",id:"arrays",children:[],level:4},{value:"Objects",id:"objects",children:[],level:4},{value:"XML (advanced)",id:"xml-advanced",children:[],level:4},{value:"Text (advanced)",id:"text-advanced",children:[],level:4}],level:3}],level:2}],d={toc:p};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"installation"},"Installation"),(0,o.kt)("p",null,"Install ",(0,o.kt)("inlineCode",{parentName:"p"},"SyncedStore")," and required dependencies:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save @syncedstore/core\n\n# SyncedStore builds on top of yjs, install that too:\nnpm install --save yjs\n")),(0,o.kt)("h2",{id:"optional-dependencies"},"Optional dependencies"),(0,o.kt)("p",null,"Also install the following helper libraries to get started:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# For syncing over webrtc:\nnpm install --save y-webrtc\n\n# If you use React, install the helper library:\nnpm install --save @syncedstore/react\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"y-webrtc")," is optional, but great during development. Later, you might want to use a different ",(0,o.kt)("a",{parentName:"p",href:"/docs/sync-providers"},"sync provider")," instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"y-webrtc"),"."),(0,o.kt)("h2",{id:"creating-a-store"},"Creating a store"),(0,o.kt)("p",null,"Now, let's set up a ",(0,o.kt)("inlineCode",{parentName:"p"},"store")," which contains and describes the data that should be synced across users and devices."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { syncedStore, getYjsValue } from "@syncedstore/core";\nimport { WebrtcProvider } from "y-webrtc";\n\n// (optional, define types for TypeScript)\ntype Vehicle = { color: string; brand: string };\n\n// Create your SyncedStore store\nexport const store = syncedStore({ vehicles: [] as Vehicle[] });\n\n// Get the Yjs document and sync automatically using y-webrtc\nconst doc = getYjsValue(store);\nconst webrtcProvider = new WebrtcProvider("my-document-id", doc);\n')),(0,o.kt)("p",null,"You can now add objects to the ",(0,o.kt)("inlineCode",{parentName:"p"},"store.vehicles")," array, and they will be synced automatically with other users. Even if you change properties (e.g.: ",(0,o.kt)("inlineCode",{parentName:"p"},'store.vehicles[0].color = "red";'),"), this will be synced with other users."),(0,o.kt)("p",null,"More about the main ",(0,o.kt)("inlineCode",{parentName:"p"},"syncedStore")," method below, or ",(0,o.kt)("a",{parentName:"p",href:"example"},"continue to the interactive example"),"."),(0,o.kt)("h2",{id:"syncedstore-method"},(0,o.kt)("inlineCode",{parentName:"h2"},"syncedStore")," method"),(0,o.kt)("p",null,"The function ",(0,o.kt)("inlineCode",{parentName:"p"},"syncedStore")," creates a store and takes two parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"shape"),": an object that describes the data you want to keep in the store. Use the ",(0,o.kt)("inlineCode",{parentName:"li"},"shape")," to define the names of objects, arrays, etc. you want to make collaborative and share across users."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"doc")," (optional): a Y.Doc instance. This will be the backing yjs document that contains the data in the store. Defaults to creating a new Y.Doc.")),(0,o.kt)("h3",{id:"shape"},"Shape"),(0,o.kt)("p",null,'Use the shape object to define the types ("shape") of the data you want to keep in the store. You can define as many properties as you like, and there are four different data types you can use; these are explained below.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const shape = {\n  exampleArrayData: [],\n  exampleObjectData: {},\n  exampleXMLData: "xml",\n  exampleTextData: "text",\n};\nconst store = syncedStore(shape);\n')),(0,o.kt)("h4",{id:"arrays"},"Arrays"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"exampleArrayData")," in the code snippet above. Arrays must always be initialized as an empty array ",(0,o.kt)("inlineCode",{parentName:"p"},"[]"),". You'll now be able to operate on the array ",(0,o.kt)("inlineCode",{parentName:"p"},"store.exampleArrayData")," like you're used to (e.g.: ",(0,o.kt)("em",{parentName:"p"},"push"),", ",(0,o.kt)("em",{parentName:"p"},"filter"),", etc), and changes will be synced across the users of your app."),(0,o.kt)("h4",{id:"objects"},"Objects"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"exampleObjectData")," in the code snippet above. Objects must always be initialized as an empty object ",(0,o.kt)("inlineCode",{parentName:"p"},"{}"),". Objects in SyncedStore resemble Maps or plain javascript objects. You'll be able to set and get properties like you're used to with regular Javascript plain objects (e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},'store.exampleObjectData.day = "Monday";'),")."),(0,o.kt)("h4",{id:"xml-advanced"},"XML (advanced)"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"exampleXMLData")," in the code snippet above. ",(0,o.kt)("inlineCode",{parentName:"p"},"store.exampleXMLData")," will now return a ",(0,o.kt)("inlineCode",{parentName:"p"},"SyncedXml")," instance."),(0,o.kt)("h4",{id:"text-advanced"},"Text (advanced)"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"exampleTextData")," in the code snippet above. ",(0,o.kt)("inlineCode",{parentName:"p"},"store.exampleTextData")," will now return a ",(0,o.kt)("inlineCode",{parentName:"p"},"SyncedText")," instance, see ",(0,o.kt)("a",{parentName:"p",href:"../advanced/text"},"Working with text"),"."))}u.isMDXComponent=!0}}]);