"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[522],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return y}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),d=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=d(e.components);return n.createElement(i.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=d(r),y=o,m=u["".concat(i,".").concat(y)]||u[y]||l[y]||a;return r?n.createElement(m,s(s({ref:t},p),{},{components:r})):n.createElement(m,s({ref:t},p))}));function y(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=u;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,s[1]=c;for(var d=2;d<a;d++)s[d]=r[d];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},83:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return c},contentTitle:function(){return i},metadata:function(){return d},toc:function(){return p},default:function(){return u}});var n=r(3117),o=r(102),a=(r(7294),r(3905)),s=["components"],c={sidebar_position:5,sidebar_label:"Sync providers"},i="Sync providers",d={unversionedId:"sync-providers",id:"sync-providers",isDocsHomePage:!1,title:"Sync providers",description:"So far, we've focused mostly on how to change to state on a synced store, and how to listen (react to) changes and display them in your application.",source:"@site/docs/sync-providers.md",sourceDirName:".",slug:"/sync-providers",permalink:"/docs/sync-providers",editUrl:"https://github.com/yousefed/SyncedStore/edit/master/docs/docs/sync-providers.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,sidebar_label:"Sync providers"},sidebar:"tutorialSidebar",previous:{title:"Yjs integration",permalink:"/docs/advanced/yjs"},next:{title:"Further reading",permalink:"/docs/further-reading"}},p=[{value:"y-webrtc",id:"y-webrtc",children:[],level:2},{value:"y-indexeddb for offline storage",id:"y-indexeddb-for-offline-storage",children:[],level:2},{value:"y-websocket",id:"y-websocket",children:[],level:2},{value:"Hocuspocus",id:"hocuspocus",children:[],level:2}],l={toc:p};function u(e){var t=e.components,r=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"sync-providers"},"Sync providers"),(0,a.kt)("p",null,"So far, we've focused mostly on how to change to state on a synced store, and how to listen (react to) changes and display them in your application."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"How to share changes between users of your application?")),(0,a.kt)("p",null,"When you update data on the store, an ",(0,a.kt)("em",{parentName:"p"},"incremental")," change, or ",(0,a.kt)("em",{parentName:"p"},"update")," is captured and can be shared between users.\nThese updates can be shared between users of your application with different ",(0,a.kt)("em",{parentName:"p"},"Sync Providers"),". So far, we've used ",(0,a.kt)("inlineCode",{parentName:"p"},"y-webrtc")," that shares updates over WebRTC (and BroadcastChannel), but you might be interested in different providers for production-ready use cases."),(0,a.kt)("h2",{id:"y-webrtc"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/yjs/y-webrtc"},"y-webrtc")),(0,a.kt)("p",null,"Propagates document updates peer-to-peer using WebRTC. The peers exchange signaling data over signaling servers. Publically available signaling servers are available. Communication over the signaling servers can be encrypted by providing a shared secret, keeping the connection information and the shared document private."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'import { syncedStore, getYjsValue } from "@syncedstore/core";\nimport { WebrtcProvider } from "y-webrtc";\n\nexport const store = syncedStore({ arrayData: [] });\n\nconst doc = getYjsValue(store);\nconst webrtcProvider = new WebrtcProvider("my-document-id", doc);\n')),(0,a.kt)("h2",{id:"y-indexeddb-for-offline-storage"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/yjs/y-indexeddb"},"y-indexeddb")," for offline storage"),(0,a.kt)("p",null,"Efficiently persists document updates to the browsers indexeddb database. The document is immediately available and only diffs need to be synced through the network provider."),(0,a.kt)("p",null,"You can use ",(0,a.kt)("em",{parentName:"p"},"y-indexeddb")," along side other providers, to store an offline copy of the document in the browser, but also share updates with other users. For example, to use both ",(0,a.kt)("em",{parentName:"p"},"y-indexeddb")," and ",(0,a.kt)("em",{parentName:"p"},"y-webrtc"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'import { syncedStore, getYjsValue } from "@syncedstore/core";\nimport { WebrtcProvider } from "y-webrtc";\nimport { IndexeddbPersistence } from "y-indexeddb";\n\nexport const store = syncedStore({ arrayData: [] });\n\nconst doc = getYjsValue(store);\nconst webrtcProvider = new WebrtcProvider("my-document-id", doc);\nconst provider = new IndexeddbPersistence("my-document-id", doc);\n')),(0,a.kt)("h2",{id:"y-websocket"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/yjs/y-websocket"},"y-websocket")),(0,a.kt)("p",null,"A module that contains a simple websocket backend and a websocket client that connects to that backend. The backend can be extended to persist updates in a leveldb database."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'import { syncedStore, getYjsValue } from "@syncedstore/core";\nimport { WebsocketProvider } from "y-websocket";\n\nexport const store = syncedStore({ arrayData: [] });\n\nconst doc = getYjsValue(store);\n\n// Start a y-websocket server, e.g.: HOST=localhost PORT=1234 npx y-websocket-server\n\nconst wsProvider = new WebsocketProvider("ws://localhost:1234", "my-roomname", doc);\n')),(0,a.kt)("h2",{id:"hocuspocus"},(0,a.kt)("a",{parentName:"h2",href:"https://www.hocuspocus.dev/"},"Hocuspocus")),(0,a.kt)("p",null,"Hocuspocus is the open source backend to bring real-time syncing, collaborative text editing and true collaboration to your application today. Get started in minutes, scale to millions."))}u.isMDXComponent=!0}}]);